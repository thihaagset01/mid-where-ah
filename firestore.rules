rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =============================================================================
    // HELPER FUNCTIONS
    // =============================================================================
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isGroupMember(groupId) {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/groups/$(groupId)).data.members[request.auth.uid] != null;
    }
    
    function isGroupAdmin(groupId) {
      return isAuthenticated() && 
             (get(/databases/$(database)/documents/groups/$(groupId)).data.admin == request.auth.uid ||
              get(/databases/$(database)/documents/groups/$(groupId)).data.members[request.auth.uid].role == 'admin');
    }
    
    function isCreator(groupId) {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/groups/$(groupId)).data.createdBy == request.auth.uid;
    }
    
    function isInviteCodeQuery() {
      return request.query.where.size() == 1 && 
             request.query.where[0].field == "inviteCode";
    }
    
    function isJoiningGroup() {
      let newMembers = request.resource.data.get('members', {});
      let oldMembers = resource.data.get('members', {});
      
      return request.auth.uid in newMembers && 
            !(request.auth.uid in oldMembers) &&
            newMembers[request.auth.uid] != null;
    }
    
    // =============================================================================
    // MAIN COLLECTION RULES
    // =============================================================================
    
    // Users collection - FIXED for event permissions
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      
      // Allow any authenticated user to read user documents 
      // (needed for events and group member info)
      allow read: if isAuthenticated();
    }
    
    // Groups collection
    match /groups/{groupId} {
      // More permissive read for authenticated users (for loading user's groups)
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated();
      
      allow update: if isAuthenticated() && 
                      (isGroupAdmin(groupId) || 
                        isJoiningGroup());
      
      allow delete: if isCreator(groupId);
      
      // =============================================================================
      // MESSAGES SUBCOLLECTION - FIXED
      // =============================================================================
      
      match /messages/{messageId} {
        // Members can read messages
        allow read: if isGroupMember(groupId);
        
        // Members can create messages
        allow create: if isGroupMember(groupId);
        
        // No updates or deletes for messages
        allow update, delete: if false;
      }
      
      // =============================================================================
      // OTHER SUBCOLLECTIONS
      // =============================================================================
      
      match /locations/{locationId} {
        allow read: if isGroupMember(groupId);
        allow write: if isGroupMember(groupId) && 
                        (locationId == request.auth.uid || isGroupAdmin(groupId));
      }
      
      match /votes/{voteId} {
        allow read: if isGroupMember(groupId);
        allow write: if isGroupMember(groupId) && voteId == request.auth.uid;
      }
      
      match /events/{eventId} {
        allow read: if isGroupMember(groupId);
        allow create: if isGroupMember(groupId);
        allow update, delete: if isGroupAdmin(groupId) || 
                               resource.data.createdBy == request.auth.uid;
      }
      
      match /venues/{venueId} {
        allow read: if isGroupMember(groupId);
        allow write: if isGroupAdmin(groupId);
      }
    }
    
    // Friend requests collection
    match /friend_requests/{requestId} {
      allow read: if isAuthenticated() && 
                     (resource.data.fromUserId == request.auth.uid || 
                      resource.data.toUserId == request.auth.uid);
      
      allow create: if isAuthenticated() && 
                       request.resource.data.fromUserId == request.auth.uid;
      
      allow update: if isAuthenticated() && 
                       resource.data.toUserId == request.auth.uid;
      
      allow delete: if isAuthenticated() && 
                       (resource.data.fromUserId == request.auth.uid || 
                        resource.data.toUserId == request.auth.uid);
    }
    
    // Configuration collection
    match /config/{configId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read, write: if isAuthenticated() && 
                            resource.data.userId == request.auth.uid;
    }
  }
}